{
  "*.cpp": {
    "template": [
      "import std;",
      "import aoc;",
      "import my_std;",
      "",
      "using aoc::skip;",
      "using std::operator\"\"s;",
      "",
      "namespace ranges = std::ranges;",
      "namespace views = std::views;",
      "",
      "struct Item {",
      "  int id;",
      "  std::string str;",
      "};",
      "",
      "std::ostream& operator<<(std::ostream& os, const Item& item) {",
      "  os << \"Item {open}\";",
      "  os << ' ' << item.id;",
      "  os << ' ' << item.str;",
      "  os << \" {close}\";",
      "  return os;",
      "}",
      "",
      "std::istream& operator>>(std::istream& is, Item& item) {",
      "  if (std::string line; std::getline(is, line)) {",
      "    std::stringstream ls{open}line{close};",
      "    if (int id; ls >> id) {",
      "      if (std::string str; ls >> str) {",
      "        item = {open}id, str{close};",
      "        return is;",
      "      }",
      "    }",
      "  }",
      "  if (is.eof()) {",
      "    return is;",
      "  }",
      "  throw std::runtime_error(\"failed parsing Item\");",
      "}",
      "",
      "constexpr auto sum{open}std::bind(my_std::ranges::fold_left, std::placeholders::_1, 0, std::plus<int>()){close};",
      "",
      "int main() {",
      "  std::ios_base::sync_with_stdio(false);",
      "",
      "  auto items{open}views::istream<Item>(std::cin) | ranges::to<std::vector<Item>>(){close};",
      "  ranges::copy(items, std::ostream_iterator<Item>(std::cout, \"\\n\"));",
      "",
      "#if 0",
      "  for (std::string line; std::getline(line);) {",
      "    std::cout << line << '\\n';",
      "  }",
      "#endif",
      "",
      "  long part1{open}0{close};",
      "  long part2{open}0{close};",
      "  std::print(\"{open}{close} {open}{close}\\n\", part1, part2);",
      "",
      "  return 0;",
      "}"
    ]
  }
}
